package cn.yunlianhui.appinterface;
/**
 * 加密和解密
 *
 */
import java.security.NoSuchAlgorithmException;

import javax.crypto.Cipher;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

public class AESUtil {	
	// 加密
    public static String Encrypt(String sSrc) throws Exception {
    	return Encrypt(sSrc, UrlConstants.PUBLICKEY);
    }    
    // 加密
    public static String Encrypt(String sSrc, String sKey) throws Exception {
        if (sKey == null) {
            System.out.print("Key为空null");
            return null;
        }
        // 判断Key是否为16位
        if (sKey.length() != 16) {
            System.out.print("Key长度不是16位");
            return null;
        }
        byte[] raw = sKey.getBytes();
        SecretKeySpec skeySpec = new SecretKeySpec(raw, "AES");
        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");//"算法/模式/补码方式"
        //Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");//"算法/模式/补码方式"
        IvParameterSpec iv = new IvParameterSpec(UrlConstants.PUBLICIV.getBytes());//使用CBC模式，需要一个向量iv，可增加加密算法的强度

        cipher.init(Cipher.ENCRYPT_MODE, skeySpec, iv);
        //cipher.init(Cipher.ENCRYPT_MODE, skeySpec);
        byte[] encrypted = cipher.doFinal(sSrc.getBytes("UTF-8"));
        //String data = String.valueOf(arr);
        //return new String(Base64.decode(encrypted,Base64.DEFAULT));
        return new String(Base64.encodeToString(encrypted, Base64.DEFAULT));
    }

    public static String Decrypt(String sSrc) throws Exception {
    	return Decrypt(sSrc, UrlConstants.PUBLICKEY);
    }
    
    // 解密
    public static String Decrypt(String sSrc, String sKey) throws Exception {
        try {
            // 判断Key是否正确
            if (sKey == null) {
                System.out.print("Key为空null");
                return null;
            }
            // 判断Key是否为16位
            if (sKey.length() != 16) {
                System.out.print("Key长度不是16位");
                return null;
            }
            byte[] raw = sKey.getBytes("UTF-8");
            byte[] bytes = new byte[16];
            for (int i = 0; i < raw.length; i++) {
                bytes[i] = raw[i];
            }
            SecretKeySpec skeySpec = new SecretKeySpec(raw, "AES");
            Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
            IvParameterSpec iv = new IvParameterSpec(UrlConstants.PUBLICIV.getBytes());
            cipher.init(Cipher.DECRYPT_MODE, skeySpec, iv);
            byte[] encrypted1 = Base64.decode(sSrc.getBytes(), Base64.DEFAULT);
            try {
                byte[] original = cipher.doFinal(encrypted1);
                String originalString = new String(original);
                return originalString;
            } catch (Exception e) {
                System.out.println(e.toString());
                return null;
            }
        } catch (Exception ex) {
            System.out.println(ex.toString());
            return null;
        }
    }
    
    public static void main(String[] args) throws Exception{
    	
    	String sSrc = "{\"module\":\"logging\",\"member_id\":\"\u65b0\u624b\u6559\u7a0b\",\"member_pwd\":\"12345678\"}";
    	String value = AESUtil.Encrypt(sSrc);
    	System.out.println(value);
    	
    	value = "Ivt2An6Ua2aTNXE+rx/4dcOkELarp94F/1U6x8cA/9U=";
    	
    	sSrc = AESUtil.Decrypt(value);
    	System.out.println(sSrc);
    }

}
